#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t c:nil creator:comment d:(not "LOGBOOK") date:t
#+OPTIONS: e:t email:nil f:t inline:t num:t p:nil pri:nil prop:nil
#+OPTIONS: stat:t tags:t tasks:t tex:t timestamp:t toc:t todo:t |:t
#+TITLE: An Emacs Tutorial for Vim User
#+AUTHOR: w0mTea
#+EMAIL: w0mT3a@gmail.com
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE: zh
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 24.3.1 (Org mode 8.3beta)
#+LATEX_CLASS: my-org-article-zh
#+LATEX_CLASS_OPTIONS:
#+LATEX_HEADER:
#+LATEX_HEADER_EXTRA:
#+DATE: \today
#+BEGIN_LaTeX
\newpage
#+END_LaTeX

* 前言
  写这篇教程的起因在于向许多vimer推荐org-mode时，
  他们总是觉得虽然org-mode功能强大，可是使用emacs总是有着一些障碍。
  作为一个同样从vim转向emacs的人，
  我觉得或许分享我的经验可以让他们更快的接受emacs，从而体验emacs的美妙。

  本文默认读者所使用的是类unix操作系统，
  因此对于windows用户来说，如果某些操作在你的电脑上无法执行，请不必大惊小怪。
* 为什么离开vim改用emacs
  在绝大多数unix/linux教程都教我们用vi/vim的情况下，
  许多人从开始就习惯了vim的一切：它的简洁、高效，它的模式，它简单直接的按键绑定……
  于是就这样，一批批的vim用户诞生。
  然而对于一直和vim并称的emacs，我们往往只是知道它很强，却不清楚它到底强在哪里。
  如果你想清楚的了解这个vim的老对手到底凭什么能和vim分庭抗礼，
  那么，你可以试着使用它。

  如果你是一个lisp爱好者，那么你绝对不能错过emacs。
  或许经过漫长的配置，vim同样可以很好的支持lisp，
  可是在emacs上，lisp天然就可以被良好的支持。
  同时，emacs也可以被lisp扩展。
  因此，你写的每一行lisp代码，
  或许都可以让你的emacs变的更好用。
  写lisp，也是让我离开vim转向emacs的契机。

  如果你厌倦了unix哲学，厌倦了做一件事只能用无数的小工具来组合；
  或者你喜欢一个大而全的东西，可以帮你做各种各样的事情，
  那么emacs无疑是一个更好的选择。
  事实上，往往emacs用的越久，每天对着它的时间也越长，
  它帮你做的事情也越超出简单的文本编辑。
  从开始的写文档写代码，到收邮件玩游戏写幻灯片，
  甚至到煮咖啡，emacs能帮我们做越来越多的事情。
* emacs的安装
  emacs并不像vim/vi那样几乎被所有类unix系统内置，
  因此我们往往需要手动安装emacs。

  对于有包管理器的系统，使用包管理器通常都可以成功安装emacs。
  需要注意的是，某些发行版的仓库默认不安装emacs的GUI版本，
  因此需要手动安装emacs-x11或类似名字的包。

  需要注意的是，emacs的GUI版本并不是xemacs。
  我们使用的emacs实际上是gnu emacs这个分支，
  而xemacs则是另一个emacs的分支。
  虽然xemacs和gnu emacs有着相当的兼容性，
  可是在某些时候难免会碰到奇怪的问题。

  对于没有包管理器或仓库没有emacs的系统，可以从
  [[http://ftp.gnu.org/gnu/emacs/]]
  下载。
* 基础知识
  毫无疑问，对于一个从未是用过vi/vim的人来说，
  使用emacs并不是一个特别让人困惑的事，
  最起码开始不是，因为emacs和他之前用过的任何文本编辑器（比如windows下著名的notepad）
  从表面上看并没有太大的不同。
  然而对于习惯了vi/vim模式操作的人来说，这样的操作模式真是让人无比烦恼：
  如果不使用一系列快捷键，效率就会变的无比低下；
  可是如果使用快捷键……那都是什么鬼东西！

  为了让我们可以更快的接受emacs，我们需要了解一些最最基础的东西。
  这些知识并不繁琐，但却总是有很大的帮助
** 快捷键的约定
   由于没有vim那样的模式之分，emacs的快捷键总是需要使用组合键。
   可是网上查到的C-n， C-x C-s都是啥意思呢？

   emacs中，快捷键的表示都遵循了一些固有的约定。
   C-x表示同时按着ctrl和x，
   C-x C-s表示先按ctrl+x，然后按ctrl+s。
   当然，也可以按着ctrl不放，然后依次按x和s咯。

   同样的，还有M-系列的快捷键。
   M-x表示同时按alt和x（alt在不同键盘上可能不同，有可能也叫meta之类的）。
   在这样的约定里，还有一些其他的特殊键，比如ESC、RET（回车）等
** 常用快捷键
   这里列举一些最最简单同时也最最常用的快捷键。
   #+ATTR_LATEX: :align |c|c|c|
   |---------+--------------------|
   | 快捷键  | 功能               |
   |---------+--------------------|
   | C-x C-f | 打开某文件         |
   | C-g     | 取消正在输入的命令 |
   | C-x C-c | 关闭emacs          |
   | C-x C-s | 保存当前文件       |
   | M-x     | 运行命令               |
   |---------+--------------------|
* 简单配置
  emacs采用emacs lisp作为配置语言，
  因此在配置里看到大堆的括号请不要惊讶。
  通常来说emacs的配置文件以及各种插件都以.el为后缀名。

  emacs的启动文件（类似于vim的.vimrc）可以是下列三个中的一个：
  - ~/.emacs
  - ~/.emacs.el
  - ~/.emacs.d/init.el

  虽然说使用哪一个配置文件都可以，可是我还是建议使用最后一种。
  因为这种方案下，你可以把emacs相关的所有配置都放在.emacs.d这个文件夹下，
  而不是零散的东堆西散。
  尤其在你的配置文件变的很大的时候，你可以轻松的把启动文件中乱七八糟的配置代码拆分成单独的模块，
  每个模块单独占有一个文件，并且统一放在这个文件夹里。

  另外，下文提到的[[package-management][包管理]]中，最好也把其相关文件放在.emacs.d文件夹下。

  至于具体的配置，可以根据自己的需求来弄。[[documents][后文]]会提供一些好的站点帮助大家完成自己的配置文档。
  而一些简单的配置，会在后面的内容里提到。
* 过渡——evil-mode
  对于刚接触emacs的vimer来说，最难习惯的估计就是光标移动了。
  如果还能像vim那样操作无疑会愉快的多。
  而像vim一样操作emacs并不是你一个人的想法，因此早就有别的高手实现了这一功能，
  那就是evil-mode。
  
  注：在下文中，配置代码在pdf中有可能无法复制，
  如果不想手打可以参考emacsWiKi：[[http://www.emacswiki.org/emacs/el-get]]
** 安装
   emacs有着若干种安装扩展的方法，具体的会在下一节讲到。
   这里只讲一种我最常用到的也是感觉最方便的方法：el-get安装。
   
   在你的配置文件中加入下列部分：（需要注意的是，el-get的默认位置也在.emacs.d文件夹内）
#+BEGIN_SRC lisp
(add-to-list 'load-path "~/.emacs.d/el-get/el-get")

(unless (require 'el-get nil t)
  (url-retrieve
   "https://github.com/dimitri/el-get/raw/master/el-get-install.el"
   (lambda (s)
     (end-of-buffer)
     (eval-print-last-sexp))))

;; now either el-get is `require'd already, or have been `load'ed by the
;; el-get installer.

;; now set our own packages
(setq
 my:el-get-packages
 '(el-get				; el-get is self-hosting
   switch-window			; takes over C-x o
   auto-complete			; complete as you type with overlays
   zencoding-mode			; http://www.emacswiki.org/emacs/ZenCoding
   color-theme		                ; nice looking emacs
   color-theme-tango))	                ; check out color-theme-solarized

;
;; Some recipes require extra tools to be installed
;;
;; Note: el-get-install requires git, so we know we have at least that.
;;
(when (el-get-executable-find "cvs")
  (add-to-list 'my:el-get-packages 'emacs-goodies-el)) ; the debian addons for emacs

(when (el-get-executable-find "svn")
  (loop for p in '(psvn    		; M-x svn-status
		   yasnippet		; powerful snippet mode
		   )
	do (add-to-list 'my:el-get-packages p)))

(setq my:el-get-packages
      (append my:el-get-packages
              (mapcar #'el-get-source-name el-get-sources)))

;; install new packages and init already installed packages
(el-get 'sync my:el-get-packages)
#+END_SRC
上述代码段会自动检查是否安装了el-get，并自动在未安装的情况下安装。
注意，这段代码需要系统中安装过git才能运行。同时为了在安装其他扩展时不会出问题，
建议安装svn或cvs。
把上述代码段保存后，重新运行emacs，就会自动安装el-get

el-get安好了，那么怎么安装evil-mode呢？回到上面那段代码，可以看到
#+BEGIN_SRC lisp
;; now set our own packages
(setq
 my:el-get-packages
 '(el-get				
   switch-window			
   auto-complete			
   zencoding-mode			
   color-theme		                
   color-theme-tango))	                
#+END_SRC
只要在这段代码内添加上我们想要的扩展，而且这个扩展恰好在el-get的仓库内，
那么我们就可以自动的安装并启用对应扩展。
大多数常见扩展都可以被el-get自动找到，evil-mode也不例外。
因此只要在这段代码中加上evil-mode就可以。搞定后和下面的差不多：
#+BEGIN_SRC lisp
(setq
 my:el-get-packages
 '(el-get				
   switch-window			
   auto-complete			
   evil-mode
   zencoding-mode			
   color-theme		                
   color-theme-tango))	                
#+END_SRC
之后重启emacs，就可以安装了。
** 启用
安装成功后，只需要在配置文件中加入
#+BEGIN_SRC lisp
(require 'evil)
(evil-mode 1)
#+END_SRC
就可以全局启用evil-mode。
如果想手动启动evil-mode，把上面的1改成0，
在需要启动的时候按M-x evil-mode RET即可。

现在，vim熟悉的操作，不就回来了吗？
* emacs中的包管理
  <<package-management>>
  在上一章，我们已经使用了el-get来安装扩展。
  只需要在列表中加入你需要的包名就可以自动安装，岂不是爽的很？
  这一节会介绍一些el-get的其他用法。

  不幸的是，并不是所有的软件包都可以通过el-get安装，
  因此还需要介绍一些其他方法来弥补这一小小的缺陷。
** el-get
*** 安装
除了之前提到的配置文件中加入包名的方法。
除此之外还可以在emacs中实时安装扩展。

*M-x el-get-install RET* 
并在出现的 *Package install* 中输入想要的包名即可安装。
注意：打包名时要善用tab补全哦，不仅可以省事，还可以检查是否打错以及该包是否在el-get的仓库内。

el-get安装的扩展包会被记录在一个文件中，无论通过哪一种方式安装扩展，
所以是否加入包名到配置文件并不会影响使用。
但是我仍建议仍加入到配置文件中的包列表中去，
因为那样在其他环境需要安装时，
你只需要复制你的配置并运行emacs即可安装所有之前安装过的插件。
但若是实时安装的插件没有加入配置，在更换环境时会遗漏一些东西。

注：在更换环境时把整个.emacs.d文件夹拷贝过去也可以避免遗漏实时安装的插件。
*** 更新
*M-x el-get-self-update RET* 即可更新el-get

*M-x el-get-update RET* 再输入包名即可更新选定包。

*M-x el-get-update-all RET* 即可更新安装记录中所有已安装的包。
注，网速慢慎用，可能会被更新信息刷屏好久
*** 删除
删除包列表中要删除的包名，使用
*M-x el-get-remove RET* 再输入包名即可。
*** recipe文件
el-get使用一些列的recipe文件来处理安装包。
每一个recipe文件都描述了安装包的名字、下载地址、版本、安装后的初始化动作等信息。
这些recipe文件就相当于包管理器的软件源元数据，
我们查询、安装等操作都需要用到它。

默认情况下，recipe文件放在.emacs.d/el-get/el-get/recipes文件夹下。

对于el-get默认没有的扩展，一个安装方法便是自己写一个简单的recipe文件。
具体的做法可以参考emacsWiKi el-get页。

另外，对于发布在emacsWiKi上的插件，可以使用
*M-x el-get-emacswiki-refresh* 来获取/刷新其recipe文件。
因此如果要安装的包列在了emacsWiKi上，那么就不用自己麻烦的去安装啦。
*** 本节参考资料
本节仅列出了少数用法，更多用法请参考下列网站：
- EmacsWiKi: [[http://www.emacswiki.org/emacs/el-get]]
- Github: [[https://github.com/dimitri/el-get/]]
** ELPA
* 保护你的手指
emacs需要大量使用ctrl和alt两个键，但在大部分qwert键盘上，ctrl的位置都在很难按到的角落里。
据说，如果长期使用小指按角落的ctrl会很容易导致手部健康出现问题。
因此，我专门加入了这一章来列举一些常用的方法来避免ctrl和alt位置不当带来的伤害。
** 用手掌外缘按ctrl
由于许多键盘中ctrl处于左下角，所以可以把左手外翻向左下角压去，这样就可以按到ctrl。
- 优点：简单，不需要特别的准备
- 缺点：笔记本键盘很难用，按着ctrl时左手几乎无法按其他任何键
- 推荐度： 2/5
** 改键
仔细观察，不难发现我们的键盘上总有一些位置很黄金却很少用到的键，
这之中典型的例子之一caps lock键。
因此，我们不妨更改键位设置，把使用频度更高的键更换到这些位置上。

一些常用的改键方案包括：
1. 左ctrl和caps lock交换：似乎是网上流传最广的改键方法
2. 右alt和右ctrl交换：这种改法最适合空格两边都是alt的键盘，这样大拇指稍稍移动就可以按到ctrl和alt

改键方法视具体环境不同而有所不同。
在windows下，可以使用各种改键软件完成这一工作。
在*nix下，对于使用xorg的用户来说也可以使用xmodmap。
如果使用DE，那么很有可能在设置中心内也有调整键盘布局的选项。

- 优点：效果不错，可以根据自己的情况自由配置
- 缺点：需要自己进行一些准备；偶尔使用被改的冷门键可能会不方便
- 推荐度： 4/5
** 踏板
有一类被称为踏板的神奇道具，可以定义踩下时发出的按键信号，
这类踏板用于emacs那真真是极好的，可以极大的减轻手部负担。

- 优点：简单方便，效果超群，直接减少手的工作量
- 缺点：相比上面的方法来说最贵；不同系统驱动可能有潜在问题
- 推荐度：3/5
* 编程语言配置
* 重量级应用——org-mode
* 文档和资料
  <<documents>>
  - emacs manual:[[http://www.gnu.org/software/emacs/manual/html_node/emacs/index.html]]
  - emacs wiki: [[http://www.emacswiki.org/emacs/]]
* 结尾
  本文仓促写成，错漏颇多，还望各位指出错误，让这份教程可以帮助更多的人。
